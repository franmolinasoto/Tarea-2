{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/franmolinasoto/Tarea-2/blob/main/Tarea2.ipynb%20(%20Ahora%20siterminado)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IMRse1InR9l0"
      },
      "source": [
        "# **CD2201-16: Ciencia de Datos en Astronomía**\n",
        "\n",
        "**Profesores:** Boris Cuevas, Paula Díaz, Danilo Sepúlveda, Francisco Urbina\n",
        "\n",
        "# **Tarea 2: Análisis Estadístico Simple**\n",
        "En esta tarea continuaremos practicando con *Numpy, Pandas y Matplotlib* mientras también aprenderán a realizar análisis estadísticos básicos con estas librerías.\n",
        "\n",
        "A estas alturas ya deben tener una noción de estadística y su aplicación en astronomía. La tarea consiste en hacer estimaciones sencillas a partir de datos astronómicos, usando herramientas básicas de Python que permiten trabajar con la estadística de distribuciones de datos.\n",
        "\n",
        "La tarea está dividida en dos partes. La primera consiste en realizar una estimación del movimiento propio de un cúmulo globular ubicado en el halo de nuestra Galaxia a partir de la distribución de estos datos. La segunda parte consiste en comprobar cómo cambia la Señal a Ruido (S/N) al promediar varios espectros de un objeto. No es necesario que tengan conocimientos previos de astronomía por ahora, basta con que sepan manipular los datos indicados.\n",
        "\n",
        "Esta tarea involucra la creación de varias figuras. Así que **póngase creativo con las figuras :D, sus colores, formas, leyendas, etc. También asegúrese de siempre colocar un título y nombre a los ejes!**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "tlfuUWe3TmIp"
      },
      "outputs": [],
      "source": [
        "# Antes de comenzar con la tarea debe correr esta celda para importar las librerías principales a utilizar\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MmDljzJPNoT8"
      },
      "source": [
        "# Primera parte: Estimar movimiento propio del cúmulo globular NGC 5694\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SOUcmgezROKf"
      },
      "source": [
        "En esta primera parte trataremos de estimar una cantidad en astronomía que se llama \"movimiento propio\" para un cúmulo globular llamado [NGC 5694](https://en.wikipedia.org/wiki/NGC_5694). Éste cúmulo globular se encuentra en el halo de nuestra Vía Láctea.\n",
        "\n",
        "El movimiento propio de una estrella es el desplazamiento que esta tiene en el cielo, visto desde la Tierra, con el paso del tiempo. Aunque las estrellas parecen fijas a simple vista, en realidad se están moviendo a través del espacio. El movimiento propio mide este cambio en la posición de la estrella, no hacia nosotros ni alejándose, sino moviéndose de forma lateral en el cielo. Las unidades de medida de esta cantidad son mas/yr (miliarcseconds per year), una cantidad muuuuuuy pequeña."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4d2PHoYeMet"
      },
      "source": [
        "Para que dimensione lo pequeña que es esta cantidad, calcule cuántos años le tomaría a una estrella, que se desplaza exclusivamente en dirección horizontal en el cielo con un movimiento propio de 1mas/yr, cubrir una distancia de 0.5 grados en el cielo en la misma dirección (equivalente al tamaño aparente de la Luna en el cielo).\n",
        "\n",
        "Hint: 1 grado corresponde a $3.6$ x $10^6$ mas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ugPRYK9XdzJA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9604eb0f-140b-4868-f32b-6c27bb170d23"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1800000.0\n"
          ]
        }
      ],
      "source": [
        "# Haga el cálculo aquí\n",
        "# ignoraremos el 1 para simplicidad\n",
        "años = 0.5 * 3.6e6\n",
        "print(años)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yckQW6vpNwBD"
      },
      "source": [
        "### a) Cargar los Datos\n",
        "\n",
        "Primero debe montar el drive, lo que permite leer archivos guardados en el mismo. Para esto debe correr la celda de abajo."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "x3pfbt8mPy3d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a15b5bc5-56e0-4159-cdf3-c2099c69c556"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LsycK59LyoOm"
      },
      "source": [
        "Importe el archivo **ngc5694_pm.csv** utilizando la función **pd.read_csv(path)** y guárdelo como **data**.\n",
        "\n",
        "En la barra de herramientas ubicada en la izquierda, puede encontrar la ruta (path) al archivo \"ngc5694_pm.csv\" dentro de su drive. Copie la ruta y cargue dicha base de datos en la siguiente celda como se le indica."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dfz4NMyXQE9g"
      },
      "outputs": [],
      "source": [
        "path_archivo = '/content/drive/MyDrive/Modulo Astro :)/ngc5694_pm.csv'\n",
        "data = pd.read_csv(path_archivo)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iG__ZWN0uIpr"
      },
      "source": [
        "### b) Explorar el DataFrame\n",
        "Explore las columnas del archivo y muestre el DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z4UDi62JuTzQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "892e1171-e241-4f42-9c27-7ab8c92af1ff"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Unnamed: 0', 'ra', 'dec', 'pmra', 'pmdec'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "# Muestra las columnas aquí\n",
        "data.columns\n",
        "#columns mostrara todas las columnas de nuestro data\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IR0mpS32uYlh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "bfed11d2-5763-4af9-8a24-8533bb292eb2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Unnamed: 0          ra        dec      pmra     pmdec\n",
              "0             0  219.370629 -27.312548  0.053134 -1.674613\n",
              "1             1  219.373996 -27.243801 -0.960711 -0.283708\n",
              "2             2  219.363458 -27.213113  0.674957 -1.741153\n",
              "3             3  219.336931 -27.172985 -0.057975 -0.564131\n",
              "4             4  219.463706 -27.189408 -0.438914 -0.487856\n",
              "..          ...         ...        ...       ...       ...\n",
              "616         616  220.732855 -26.148055 -0.269935 -0.891652\n",
              "617         617  220.710525 -26.150902 -0.962554 -0.400258\n",
              "618         618  219.327652 -27.267281 -0.796753 -0.266571\n",
              "619         619  219.225796 -27.172318 -0.901963 -0.302597\n",
              "620         620  219.162241 -27.121378  0.059221 -1.300554\n",
              "\n",
              "[621 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b1291da-fa68-498d-a1b3-b6316fc6fa5f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>ra</th>\n",
              "      <th>dec</th>\n",
              "      <th>pmra</th>\n",
              "      <th>pmdec</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>219.370629</td>\n",
              "      <td>-27.312548</td>\n",
              "      <td>0.053134</td>\n",
              "      <td>-1.674613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>219.373996</td>\n",
              "      <td>-27.243801</td>\n",
              "      <td>-0.960711</td>\n",
              "      <td>-0.283708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>219.363458</td>\n",
              "      <td>-27.213113</td>\n",
              "      <td>0.674957</td>\n",
              "      <td>-1.741153</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>219.336931</td>\n",
              "      <td>-27.172985</td>\n",
              "      <td>-0.057975</td>\n",
              "      <td>-0.564131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>219.463706</td>\n",
              "      <td>-27.189408</td>\n",
              "      <td>-0.438914</td>\n",
              "      <td>-0.487856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>616</th>\n",
              "      <td>616</td>\n",
              "      <td>220.732855</td>\n",
              "      <td>-26.148055</td>\n",
              "      <td>-0.269935</td>\n",
              "      <td>-0.891652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>617</th>\n",
              "      <td>617</td>\n",
              "      <td>220.710525</td>\n",
              "      <td>-26.150902</td>\n",
              "      <td>-0.962554</td>\n",
              "      <td>-0.400258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618</th>\n",
              "      <td>618</td>\n",
              "      <td>219.327652</td>\n",
              "      <td>-27.267281</td>\n",
              "      <td>-0.796753</td>\n",
              "      <td>-0.266571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>619</th>\n",
              "      <td>619</td>\n",
              "      <td>219.225796</td>\n",
              "      <td>-27.172318</td>\n",
              "      <td>-0.901963</td>\n",
              "      <td>-0.302597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>620</th>\n",
              "      <td>620</td>\n",
              "      <td>219.162241</td>\n",
              "      <td>-27.121378</td>\n",
              "      <td>0.059221</td>\n",
              "      <td>-1.300554</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>621 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b1291da-fa68-498d-a1b3-b6316fc6fa5f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4b1291da-fa68-498d-a1b3-b6316fc6fa5f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4b1291da-fa68-498d-a1b3-b6316fc6fa5f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-45dba870-06fb-4d5d-a387-fa56d148ba42\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45dba870-06fb-4d5d-a387-fa56d148ba42')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-45dba870-06fb-4d5d-a387-fa56d148ba42 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5b83f033-eee4-416e-9f1b-6e69d5690cbd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5b83f033-eee4-416e-9f1b-6e69d5690cbd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 621,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 179,\n        \"min\": 0,\n        \"max\": 620,\n        \"num_unique_values\": 621,\n        \"samples\": [\n          49,\n          584,\n          82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ra\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.379300322763466,\n        \"min\": 218.92974692026868,\n        \"max\": 220.8914308796261,\n        \"num_unique_values\": 621,\n        \"samples\": [\n          219.96676748452632,\n          220.2567759779741,\n          219.87997965757623\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dec\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3189397096408327,\n        \"min\": -27.42360916434232,\n        \"max\": -25.6258873419358,\n        \"num_unique_values\": 621,\n        \"samples\": [\n          -26.56189583586245,\n          -26.49625094080084,\n          -26.55736102560181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pmra\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43823620785185174,\n        \"min\": -0.9996359105774528,\n        \"max\": 0.6754947553818348,\n        \"num_unique_values\": 621,\n        \"samples\": [\n          -0.4641515803029317,\n          -0.6656689032291498,\n          -0.9085819402945384\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pmdec\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.42760876013101434,\n        \"min\": -1.897719807252715,\n        \"max\": -0.0990601596139654,\n        \"num_unique_values\": 621,\n        \"samples\": [\n          -1.0913779218482405,\n          -1.826220454875675,\n          -1.043568500030713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Muestra el DataFrame aquí\n",
        "data\n",
        "# al poner el nombre, se esta llamando al DataFrame"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q_CLEl5CzgPM"
      },
      "source": [
        "### c) Graficar un scatter plot\n",
        "Cada fila del DataFrame corresponde a una estrella del cielo y, como habra notado, hay dos columnas denominadas **pmra** y **pmdec**. Estas representan el movimiento propio en ascensión recta y el movimiento propio en declinación, respectivamente, que son los desplazamientos de una estrella en dos ejes distintos del cielo: RA y DEC.\n",
        "\n",
        "Selecciona del DataFrame los datos de las columnas **pmra** y **pmdec** y guárdalos en las variables indicadas. Luego, realiza un gráfico de dispersión (scatter plot) colocando en el eje x los datos de \"pmra\" y en el eje y los de \"pmdec\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "ljT-OoR0madd",
        "jupyter": {
          "outputs_hidden": true
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "05c84221-6f91-408d-9ba3-c05bb41bb1a7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     -1.674613\n",
              "1     -0.283708\n",
              "2     -1.741153\n",
              "3     -0.564131\n",
              "4     -0.487856\n",
              "         ...   \n",
              "616   -0.891652\n",
              "617   -0.400258\n",
              "618   -0.266571\n",
              "619   -0.302597\n",
              "620   -1.300554\n",
              "Name: pmdec, Length: 621, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>pmdec</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.674613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.283708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.741153</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.564131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.487856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>616</th>\n",
              "      <td>-0.891652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>617</th>\n",
              "      <td>-0.400258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618</th>\n",
              "      <td>-0.266571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>619</th>\n",
              "      <td>-0.302597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>620</th>\n",
              "      <td>-1.300554</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>621 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# llamamos a la columna pmra y pmdec y les asignamos un nombre, para asi solo tener esos valores:\n",
        "pmra = data['pmra']\n",
        "pmra\n",
        "pmdec = data['pmdec']\n",
        "pmdec"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4gkoGTBgmt1L",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "62fc5291-537d-490d-c1cd-a7a55a28a58f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Haga el gráfico en esta celda\n",
        "#utilizamos scatter para analizar la distribucion de datos pmra y pmdec en un grafico:\n",
        "plt.scatter(pmra,pmdec)\n",
        "plt.xlabel = 'pmra'\n",
        "plt.ylabel = 'pmdec'\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8GmiOdWRmxs8"
      },
      "source": [
        "Si observa bien, parece que los puntos se concentran hacia la parte izquierda del gráfico. Ese grupo representa los movimientos propios de las estrellas que pertencen al cúmulo globular. Los demás puntos corresponden a los movimientos propios de estrellas de la galaxia que se \"colaron\" en la línea de visión entre nosotros (Tierra) y el cúmulo."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "06TGBeMC_6By"
      },
      "source": [
        "### c) Generar distribución Gaussiana\n",
        "Calcule el promedio y la desviación estándar de ambas columnas (**pmra** y **pmdec**) y guárdelos en las variables que se indican."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yQr1b2gToCfa"
      },
      "outputs": [],
      "source": [
        "# las funciones mean y std, sirven para calcular la media (promedio) y la desviación estandan, lo cual es lo que se nos pide (calcular std y mean de pmra y pmdec):\n",
        "\n",
        "\n",
        "mu_pmra = pmra.mean()\n",
        "std_pmra = pmra.std()\n",
        "\n",
        "mu_pmdec = pmdec.mean()\n",
        "std_pmdec = pmdec.std()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EDQZsqWSo4BI"
      },
      "source": [
        "Con los promedios y desviaciones estandar obtenidas, simule una distribución gaussiana para cada eje del movimieto propio (pmra y pmdec). Recuerda que la distribución gaussiana es de la forma:\n",
        "\n",
        "$$f(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$\n",
        "\n",
        "\n",
        "Por lo que necesitamos los valores de $x, \\mu$ y $\\sigma$ para cada caso.\n",
        "\n",
        "**En ascención recta**:\n",
        "1. Crea un arreglo de 300 números que estén entre -1.5 y 1. Este sería el $x$\n",
        "2. Con $\\mu$ y $\\sigma$ correspondientes a pmra calculados en la celda de arriba, genere los valores $f(x)$. Para eso, utilize la función **norm** de **scipy.stats** que está importada en la siguiente celda. Usa el método **pdf** (probability density function)\n",
        "\n",
        "\n",
        "\n",
        "**En declinación:**\n",
        "Haga lo mismo, pero el $x$ sería 300 números que estén entre -2.5 y 0.5."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gR7uz9K0o4Pj"
      },
      "outputs": [],
      "source": [
        "from scipy.stats import norm\n",
        "# creamos un arreglo x utilizando linspace, para definir la cantidad de datos que necesitamos\n",
        "x_pmra = np.linspace(-1.5,1,300)\n",
        "# con la función norm pdf, obtenemos la densidad de probabilidad (gaussiana)\n",
        "fx_pmra = norm.pdf(x_pmra,mu_pmra,std_pmra)\n",
        "\n",
        "#realizamos lo mismo con pmdec\n",
        "x_pmdec = np.linspace(-2.5,0.5,300)\n",
        "fx_pmdec = norm.pdf(x_pmdec,mu_pmdec,std_pmdec)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PRr7uiMTALrW"
      },
      "source": [
        "### d) Graficar histogramas de la distribución de movimientos propios junto a la distribución Gaussiana\n",
        "\n",
        "Grafique con matplotlib un hitograma (busque qué método de matplotlib sirve) de pmra y sobre él grafique la gaussiana correspondiente."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rseJSP8r1yfh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "a1d35e53-e940-4958-cb33-e875f63c2e88"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiMAAAGdCAYAAADAAnMpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABG9UlEQVR4nO3deZxOdf/H8dd1XXPNjGEWy4yxjC1LdhIaynKjsRUtErKFUlQo3fQrSnXTgjYldTMUobLdCNNIssYwWULZKTP2Gets1/n9cXFlMGOuMTNnlvfz8TiPmXOu7/eczzmOmfec1WIYhoGIiIiISaxmFyAiIiIFm8KIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERMRUCiMiIiJiKg+zC8gIh8PB33//ja+vLxaLxexyREREJAMMw+DcuXOULl0aqzXt4x95Ioz8/fffhISEmF2GiIiIZMKRI0coW7Zsmp/niTDi6+sLOFfGz8/P5GpEREQkI+Lj4wkJCXH9Hk9LnggjV0/N+Pn5KYyIiIjkMbe6xEIXsIqIiIipFEZERETEVAojIiIiYqo8cc2IiIjkToZhkJycTEpKitmliAlsNhseHh63/dgNhREREcmUxMREjh07xsWLF80uRUzk4+NDqVKl8PT0zPQ8FEZERMRtDoeDAwcOYLPZKF26NJ6ennooZQFjGAaJiYmcOHGCAwcOUKVKlXQfbJYehREREXFbYmIiDoeDkJAQfHx8zC5HTFKoUCHsdjuHDh0iMTERb2/vTM1HF7CKiEimZfYvYck/smIf0F4kIiIiplIYERERuU54eDgBAQFml1Fg6JoRERHJUhVGLMmxZR0c18HtPn369OHs2bMsWLAg1fRVq1bRsmVLzpw5Q9euXWnfvn2G5hceHs6QIUM4e/as27WIk8KIiIjIdQoVKkShQoXMLuMGiYmJt3ULbW6l0zQiIiLXuf40zW+//UbLli3x9fXFz8+PBg0asHnzZlatWkXfvn2Ji4vDYrFgsVh4/fXXAThz5gy9evWiaNGi+Pj40K5dO/78889Uy/niiy9cdyQ99NBDTJgwIdVyX3/9derVq8eXX35JxYoVXXerLFu2jHvvvZeAgACKFy9Ox44d2bdvn6vfwYMHsVgszJ07l/vuu49ChQrRsGFD/vjjDzZt2sTdd99NkSJFaNeuHSdOnHD127RpE23atKFEiRL4+/vTvHlztmzZkvUb+DoKIyIiIrfQo0cPypYty6ZNm4iKimLEiBHY7XaaNGnCBx98gJ+fH8eOHePYsWO89NJLgPN00ObNm1m0aBHr16/HMAzat29PUlISAGvXrmXgwIG88MILREdH06ZNG95+++0blr13716+//575s2bR3R0NAAXLlxg2LBhbN68mcjISKxWKw899BAOhyNV39GjR/Pqq6+yZcsWPDw86N69Oy+//DIffvghv/zyC3v37mXUqFGu9ufOnaN3796sWbOGDRs2UKVKFdq3b8+5c+eyacs66TSNiNxUhRFLMnU+XiQvWLx4MUWKFEk1Lb1H2h8+fJjhw4dz5513AlClShXXZ/7+/lgsFoKDg13T/vzzTxYtWsTatWtp0qQJADNnziQkJIQFCxbQpUsXPv74Y9q1a+cKL1WrVmXdunUsXrw41bITExOZMWMGgYGBrmmPPPJIqjZTp04lMDCQ33//nVq1armmv/TSS4SFhQHwwgsv0K1bNyIjI2natCkA/fr1Izw83NX+X//6V6r5TpkyhYCAAH7++Wc6duyY5va5XToyIiIiBU7Lli2Jjo5ONXz55Zdpth82bBj9+/endevWjBs3LtUpkZvZtWsXHh4eNG7c2DWtePHiVKtWjV27dgGwZ88eGjVqlKrf9eMA5cuXTxVEwBl2unXrRqVKlfDz86NChQqAMzRdq06dOq7vS5YsCUDt2rVTTTt+/LhrPDY2lgEDBlClShX8/f3x8/Pj/PnzN8w3qymMiIhIgVO4cGEqV66caihTpkya7V9//XV27txJhw4dWLlyJTVq1GD+/Pk5Vuv1HnjgAU6fPs0XX3zBxo0b2bhxI+A8inItu93u+v7q4/qvn3btqZ3evXsTHR3Nhx9+yLp164iOjqZ48eI3zDerKYyIiIhkQNWqVRk6dCgrVqzg4YcfZtq0aQB4enrecIqnevXqJCcnu0ICwKlTp9izZw81atQAoFq1amzatClVv+vHb+bqfF599VVatWpF9erVOXPmzO2uHuC8juX555+nffv21KxZEy8vL06ePJkl806PwoiIiEg6Ll26xODBg1m1ahWHDh1i7dq1bNq0ierVqwNQoUIFzp8/T2RkJCdPnuTixYtUqVKFTp06MWDAANasWcNvv/3GE088QZkyZejUqRMAzz33HEuX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hRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERMRUCiMiIiJiKoURERERMZXCiIiIiJhKYURERERMpTAiIiIiplIYEREREVMpjIiIiIipFEZERETEVAojIiIiYiqFERERETGVwoiIiIiYSmFERERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERMRUCiMiIiJiKoURERERMZXCiIiIiJjKrTAyduxYGjZsiK+vL0FBQXTu3Jk9e/bcst+3337LnXfeibe3N7Vr12bp0qWZLlhERETyF7fCyM8//8ygQYPYsGEDERERJCUlcf/993PhwoU0+6xbt45u3brRr18/tm7dSufOnencuTM7duy47eJFzFBhxBKzS3BbXqw5PfltfUQKOg93Gi9btizVeHh4OEFBQURFRdGsWbOb9vnwww9p27Ytw4cPB+DNN98kIiKCTz75hMmTJ2eybBEREckvbuuakbi4OACKFSuWZpv169fTunXrVNPCwsJYv359mn0SEhKIj49PNYiIiEj+lOkw4nA4GDJkCE2bNqVWrVpptouJiaFkyZKpppUsWZKYmJg0+4wdOxZ/f3/XEBISktkyRUREJJfLdBgZNGgQO3bsYPbs2VlZDwAjR44kLi7ONRw5ciTLlyEiIiK5g1vXjFw1ePBgFi9ezOrVqylbtmy6bYODg4mNjU01LTY2luDg4DT7eHl54eXllZnSREREJI9x68iIYRgMHjyY+fPns3LlSipWrHjLPqGhoURGRqaaFhERQWhoqHuVioiISL7k1pGRQYMGMWvWLBYuXIivr6/rug9/f38KFSoEQK9evShTpgxjx44F4IUXXqB58+aMHz+eDh06MHv2bDZv3syUKVOyeFVEREQkL3LryMhnn31GXFwcLVq0oFSpUq5hzpw5rjaHDx/m2LFjrvEmTZowa9YspkyZQt26dfnuu+9YsGBBuhe9ioiISMHh1pERwzBu2WbVqlU3TOvSpQtdunRxZ1EiIiJSQOjdNCIiImIqhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERMRUCiMiIiJiKoURERERMZXCiIiIiJhKYURERERMpTAiIiIiplIYEREREVMpjIiIiIipFEZERETEVAojIiIiYiqFERERETGVwoiIiIiYSmFERERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiNxChRFLUn3NTN9bTcsOWbWcnKpXRAouhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERMRUCiMiIiJiKoURERERMZXCiIiIiJhKYURERERMpTAiIiIiplIYEREREVMpjIiIiIipFEZERETEVAojIiIiYiqFERERETGVwoiIiIiYSmFERERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImMrtMLJ69WoeeOABSpcujcViYcGCBem2X7VqFRaL5YYhJiYmszWLiIhIPuJ2GLlw4QJ169Zl0qRJbvXbs2cPx44dcw1BQUHuLlpERETyIQ93O7Rr14527dq5vaCgoCACAgLc7iciIiL5W45dM1KvXj1KlSpFmzZtWLt2bbptExISiI+PTzWIiIhI/pTtYaRUqVJMnjyZ77//nu+//56QkBBatGjBli1b0uwzduxY/P39XUNISEh2lykiIiImcfs0jbuqVatGtWrVXONNmjRh3759TJw4ka+++uqmfUaOHMmwYcNc4/Hx8QokIiIi+VS2h5GbadSoEWvWrEnzcy8vL7y8vHKwIhERETGLKc8ZiY6OplSpUmYsWkRERHIZt4+MnD9/nr1797rGDxw4QHR0NMWKFaNcuXKMHDmSv/76ixkzZgDwwQcfULFiRWrWrMnly5f58ssvWblyJStWrMi6tRAREZE8y+0wsnnzZlq2bOkav3ptR+/evQkPD+fYsWMcPnzY9XliYiIvvvgif/31Fz4+PtSpU4cff/wx1TxERESk4HI7jLRo0QLDMNL8PDw8PNX4yy+/zMsvv+x2YSIiIlIw6N00IiIiYiqFEZEsUGHEklRfr/8+q+aTkXmm1abCiCU3nVdm6kxvfreq63aXm1G3s/1FJGcpjIiIiIipFEZERETEVAojIiIiYiqFERERETGVwoiIiIiYSmFERERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKkURkRERMRUCiMiIiJiKoURERERMZXCiIiIiJhKYURERERMpTAiIiIiplIYEREREVMpjIiIiIipFEZERETEVAojIiIiYiqFERERETGVwoiIiIiYSmFERERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImEphREREREylMCKmqTBiiWu4Op7Rtjf77FbzuFUtmf08I30zuo43+3r9PNxd/u24voacWGZG3U4NuaF++Udu/ffIrXXlRwojIiIiYiqFERERETGVwoiIiIiYSmFERERETKUwIiIiIqZSGBERERFTKYyIiIiIqRRGRERExFQKIyIiImIqhRERERExlcKIiIiImEphREREREylMCIiIiKmUhgRERERUymMiIiIiKncDiOrV6/mgQceoHTp0lgsFhYsWHDLPqtWreKuu+7Cy8uLypUrEx4enolSRUREJD9yO4xcuHCBunXrMmnSpAy1P3DgAB06dKBly5ZER0czZMgQ+vfvz/Lly90uVkRERPIfD3c7tGvXjnbt2mW4/eTJk6lYsSLjx48HoHr16qxZs4aJEycSFhbm7uJFREQkn8n2a0bWr19P69atU00LCwtj/fr12b1oERERyQPcPjLirpiYGEqWLJlqWsmSJYmPj+fSpUsUKlTohj4JCQkkJCS4xuPj47O7TBERETFJrrybZuzYsfj7+7uGkJAQs0sSERGRbJLtYSQ4OJjY2NhU02JjY/Hz87vpURGAkSNHEhcX5xqOHDmS3WWKiIiISbL9NE1oaChLly5NNS0iIoLQ0NA0+3h5eeHl5ZXdpYmIiEgu4PaRkfPnzxMdHU10dDTgvHU3Ojqaw4cPA86jGr169XK1HzhwIPv37+fll19m9+7dfPrpp8ydO5ehQ4dmzRqIiIhInuZ2GNm8eTP169enfv36AAwbNoz69eszatQoAI4dO+YKJgAVK1ZkyZIlREREULduXcaPH8+XX36p23pFREQEyMRpmhYtWmAYRpqf3+zpqi1atGDr1q3uLkpEREQKgFx5N42IiIgUHAojIiIiYiqFERERETGVwoiIiIiYKtufMyIi+ZzDAYnnKM1JiNkBKYn/fObhBV5+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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#para el histograma utilizaremos 300 bins, ya que es la cantidad de datos que tenemos, por lo que el histograma sera lo más preciso posible con 300\n",
        "plt.hist(pmra, bins=300, density=True, label = 'Histograma')\n",
        "plt.plot(x_pmra, fx_pmra, label = 'gaussiana')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hUFWG5eS10dE"
      },
      "source": [
        "Notará que la gaussiana apenas se ve en el gráfico, esto es porque la gaussiana está normalizada (el área bajo la curva es 1), pero esto no es así para el histograma. El problema se puede arreglar incluyendo el parámetro **density=True** en el método que grafica el histograma.\n",
        "\n",
        "Repita la gráfica anterior pero ahora tanto para pmra como para pmdec e incorporando la modificación de **density=True**. Muestre los gráficos en una misma figura como subplots."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zVQmIYkC5Iwl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "a3e33a0f-8335-4691-f6a7-6d58aa6ba2cc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#realizamos lo mismo pero con pmdec\n",
        "plt.hist(pmdec, bins=300, density=True, label = 'Histograma')\n",
        "plt.plot(x_pmdec, fx_pmdec, label = 'gaussiana')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9XPRCYBT5SKE"
      },
      "source": [
        "Repita la figura anterior y ahora agréguele a cada gráfica (pmra y pmdec) una franja vertical que abarque $\\mu \\pm \\sigma$ utilizando **plt.axvspan()**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LrTcPtZG5_4z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 843
        },
        "outputId": "ddd26428-d048-4565-9495-964a82f169ca"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "\n",
        "#repetimos los histogramas anteriores, pero le añadimos la franja vertical en el intervalor mu +-sigma:\n",
        "plt.hist(pmra, bins=300, density=True, label = 'Histograma')\n",
        "plt.plot(x_pmra, fx_pmra, label = 'gaussiana')\n",
        "plt.axvspan(mu_pmra-std_pmra,mu_pmra+std_pmra, color = 'red', alpha = 0.3)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "plt.hist(pmdec, bins=300, density=True, label = 'Histograma')\n",
        "plt.plot(x_pmdec, fx_pmdec, label = 'gaussiana')\n",
        "plt.axvspan(mu_pmdec-std_pmdec,mu_pmdec+std_pmdec, color = 'green', alpha = 0.3)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TeKH3rnms03h"
      },
      "source": [
        "Según las gaussiaas obtenidas, ¿Cuál es la estimación para pmra y pmdec del cúmulo globular?\n",
        "\n",
        "**Respuesta:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_ad3fEpu_fzn"
      },
      "source": [
        "# Segunda parte: Señal a Ruido\n",
        "Para la siguiente parte deberá trabajar con datos de espectros con líneas de emisión. Un espéctro lo puede entender como un gráfico de potencia vs longitud de onda.\n",
        "\n",
        "Abra el archivo **data_spectra.csv** con pandas y muestre el DataFrame. (No es necesario montar de nuevo el drive porque ya se hizo en la parte anterior).\n",
        "\n",
        "Las columnas **obs** corresponden a observaciones (espectro) de un objeto, en la que cada valor corresponde a la potencia asociada a una longitud de onda. La columna **Wlth** corresponde a las longitudes de onda."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "oeslf5cZUU19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "outputId": "21ada41b-73ca-40bb-d852-58f7e14e2b1f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0          Wlth     obs_1     obs_2     obs_3     obs_4  \\\n",
              "0              0  13893.158801  0.673065  1.048759  1.135927  1.365672   \n",
              "1              1  13894.381791  1.218438  1.384774  0.647763  1.286700   \n",
              "2              2  13895.604780  1.244496  0.775893  1.213005  0.898531   \n",
              "3              3  13896.827769  1.395414  0.853016  0.929927  0.617134   \n",
              "4              4  13898.050759  1.013531  0.891468  1.125626  1.354080   \n",
              "...          ...           ...       ...       ...       ...       ...   \n",
              "1415        1415  15623.688705  0.693123  1.222298  1.249391  1.105946   \n",
              "1416        1416  15624.911694  1.387281  1.332809  1.151107  1.254744   \n",
              "1417        1417  15626.134683  1.208096  0.914692  0.874394  1.083929   \n",
              "1418        1418  15627.357673  1.167845  1.261191  1.306496  0.945764   \n",
              "1419        1419  15628.580662  0.624966  0.760200  1.208771  0.668682   \n",
              "\n",
              "         obs_5     obs_6     obs_7     obs_8  ...    obs_11    obs_12  \\\n",
              "0     1.205216  0.777480  0.777436  0.723454  ...  0.851846  0.828067   \n",
              "1     1.223776  1.295540  1.289402  0.979057  ...  0.792874  0.792945   \n",
              "2     1.203176  1.130615  1.133467  0.645016  ...  1.221805  1.081824   \n",
              "3     1.101129  1.363642  0.810799  0.901758  ...  0.847701  1.200020   \n",
              "4     0.681703  0.968364  0.630361  1.299735  ...  0.612065  0.706618   \n",
              "...        ...       ...       ...       ...  ...       ...       ...   \n",
              "1415  1.374470  0.780127  1.094418  1.061418  ...  1.350584  0.760689   \n",
              "1416  1.331042  0.979532  0.881491  1.209496  ...  1.177786  0.711269   \n",
              "1417  1.352754  0.606663  0.657862  1.055156  ...  0.656540  0.970074   \n",
              "1418  1.119779  0.892840  1.305614  0.618601  ...  0.827102  0.619797   \n",
              "1419  0.903250  1.356746  1.157474  0.996727  ...  0.731348  0.876257   \n",
              "\n",
              "        obs_13    obs_14    obs_15    obs_16    obs_17    obs_18    obs_19  \\\n",
              "0     0.964739  0.894189  0.734513  0.888324  0.764781  1.213573  0.952286   \n",
              "1     1.115174  1.228799  0.755613  0.933819  1.020234  1.121144  1.394790   \n",
              "2     0.871400  1.229938  0.928502  0.949589  1.276152  0.616311  1.130431   \n",
              "3     1.196751  1.047428  0.729014  1.230125  1.368756  0.777179  0.810549   \n",
              "4     0.696333  1.021694  1.160951  1.081304  1.387839  0.791448  0.876079   \n",
              "...        ...       ...       ...       ...       ...       ...       ...   \n",
              "1415  1.397787  0.627549  0.698279  0.815585  0.813801  1.079114  0.652794   \n",
              "1416  1.098026  0.829656  1.314102  1.167825  1.275656  0.947942  0.827006   \n",
              "1417  0.997054  1.222855  0.970080  1.306091  1.173684  0.832711  1.381874   \n",
              "1418  1.307590  0.979190  0.767770  1.170864  0.892064  1.355639  0.753463   \n",
              "1419  1.391777  1.157928  0.913591  1.134840  0.971503  1.331920  0.866891   \n",
              "\n",
              "        obs_20  \n",
              "0     0.714581  \n",
              "1     0.795326  \n",
              "2     1.004481  \n",
              "3     0.716121  \n",
              "4     0.704909  \n",
              "...        ...  \n",
              "1415  0.897564  \n",
              "1416  1.365960  \n",
              "1417  1.149033  \n",
              "1418  1.000630  \n",
              "1419  1.005167  \n",
              "\n",
              "[1420 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a610ef6f-6b96-4c0c-960d-cb565089b6d1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Wlth</th>\n",
              "      <th>obs_1</th>\n",
              "      <th>obs_2</th>\n",
              "      <th>obs_3</th>\n",
              "      <th>obs_4</th>\n",
              "      <th>obs_5</th>\n",
              "      <th>obs_6</th>\n",
              "      <th>obs_7</th>\n",
              "      <th>obs_8</th>\n",
              "      <th>...</th>\n",
              "      <th>obs_11</th>\n",
              "      <th>obs_12</th>\n",
              "      <th>obs_13</th>\n",
              "      <th>obs_14</th>\n",
              "      <th>obs_15</th>\n",
              "      <th>obs_16</th>\n",
              "      <th>obs_17</th>\n",
              "      <th>obs_18</th>\n",
              "      <th>obs_19</th>\n",
              "      <th>obs_20</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>13893.158801</td>\n",
              "      <td>0.673065</td>\n",
              "      <td>1.048759</td>\n",
              "      <td>1.135927</td>\n",
              "      <td>1.365672</td>\n",
              "      <td>1.205216</td>\n",
              "      <td>0.777480</td>\n",
              "      <td>0.777436</td>\n",
              "      <td>0.723454</td>\n",
              "      <td>...</td>\n",
              "      <td>0.851846</td>\n",
              "      <td>0.828067</td>\n",
              "      <td>0.964739</td>\n",
              "      <td>0.894189</td>\n",
              "      <td>0.734513</td>\n",
              "      <td>0.888324</td>\n",
              "      <td>0.764781</td>\n",
              "      <td>1.213573</td>\n",
              "      <td>0.952286</td>\n",
              "      <td>0.714581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>13894.381791</td>\n",
              "      <td>1.218438</td>\n",
              "      <td>1.384774</td>\n",
              "      <td>0.647763</td>\n",
              "      <td>1.286700</td>\n",
              "      <td>1.223776</td>\n",
              "      <td>1.295540</td>\n",
              "      <td>1.289402</td>\n",
              "      <td>0.979057</td>\n",
              "      <td>...</td>\n",
              "      <td>0.792874</td>\n",
              "      <td>0.792945</td>\n",
              "      <td>1.115174</td>\n",
              "      <td>1.228799</td>\n",
              "      <td>0.755613</td>\n",
              "      <td>0.933819</td>\n",
              "      <td>1.020234</td>\n",
              "      <td>1.121144</td>\n",
              "      <td>1.394790</td>\n",
              "      <td>0.795326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>13895.604780</td>\n",
              "      <td>1.244496</td>\n",
              "      <td>0.775893</td>\n",
              "      <td>1.213005</td>\n",
              "      <td>0.898531</td>\n",
              "      <td>1.203176</td>\n",
              "      <td>1.130615</td>\n",
              "      <td>1.133467</td>\n",
              "      <td>0.645016</td>\n",
              "      <td>...</td>\n",
              "      <td>1.221805</td>\n",
              "      <td>1.081824</td>\n",
              "      <td>0.871400</td>\n",
              "      <td>1.229938</td>\n",
              "      <td>0.928502</td>\n",
              "      <td>0.949589</td>\n",
              "      <td>1.276152</td>\n",
              "      <td>0.616311</td>\n",
              "      <td>1.130431</td>\n",
              "      <td>1.004481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>13896.827769</td>\n",
              "      <td>1.395414</td>\n",
              "      <td>0.853016</td>\n",
              "      <td>0.929927</td>\n",
              "      <td>0.617134</td>\n",
              "      <td>1.101129</td>\n",
              "      <td>1.363642</td>\n",
              "      <td>0.810799</td>\n",
              "      <td>0.901758</td>\n",
              "      <td>...</td>\n",
              "      <td>0.847701</td>\n",
              "      <td>1.200020</td>\n",
              "      <td>1.196751</td>\n",
              "      <td>1.047428</td>\n",
              "      <td>0.729014</td>\n",
              "      <td>1.230125</td>\n",
              "      <td>1.368756</td>\n",
              "      <td>0.777179</td>\n",
              "      <td>0.810549</td>\n",
              "      <td>0.716121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>13898.050759</td>\n",
              "      <td>1.013531</td>\n",
              "      <td>0.891468</td>\n",
              "      <td>1.125626</td>\n",
              "      <td>1.354080</td>\n",
              "      <td>0.681703</td>\n",
              "      <td>0.968364</td>\n",
              "      <td>0.630361</td>\n",
              "      <td>1.299735</td>\n",
              "      <td>...</td>\n",
              "      <td>0.612065</td>\n",
              "      <td>0.706618</td>\n",
              "      <td>0.696333</td>\n",
              "      <td>1.021694</td>\n",
              "      <td>1.160951</td>\n",
              "      <td>1.081304</td>\n",
              "      <td>1.387839</td>\n",
              "      <td>0.791448</td>\n",
              "      <td>0.876079</td>\n",
              "      <td>0.704909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1415</th>\n",
              "      <td>1415</td>\n",
              "      <td>15623.688705</td>\n",
              "      <td>0.693123</td>\n",
              "      <td>1.222298</td>\n",
              "      <td>1.249391</td>\n",
              "      <td>1.105946</td>\n",
              "      <td>1.374470</td>\n",
              "      <td>0.780127</td>\n",
              "      <td>1.094418</td>\n",
              "      <td>1.061418</td>\n",
              "      <td>...</td>\n",
              "      <td>1.350584</td>\n",
              "      <td>0.760689</td>\n",
              "      <td>1.397787</td>\n",
              "      <td>0.627549</td>\n",
              "      <td>0.698279</td>\n",
              "      <td>0.815585</td>\n",
              "      <td>0.813801</td>\n",
              "      <td>1.079114</td>\n",
              "      <td>0.652794</td>\n",
              "      <td>0.897564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1416</th>\n",
              "      <td>1416</td>\n",
              "      <td>15624.911694</td>\n",
              "      <td>1.387281</td>\n",
              "      <td>1.332809</td>\n",
              "      <td>1.151107</td>\n",
              "      <td>1.254744</td>\n",
              "      <td>1.331042</td>\n",
              "      <td>0.979532</td>\n",
              "      <td>0.881491</td>\n",
              "      <td>1.209496</td>\n",
              "      <td>...</td>\n",
              "      <td>1.177786</td>\n",
              "      <td>0.711269</td>\n",
              "      <td>1.098026</td>\n",
              "      <td>0.829656</td>\n",
              "      <td>1.314102</td>\n",
              "      <td>1.167825</td>\n",
              "      <td>1.275656</td>\n",
              "      <td>0.947942</td>\n",
              "      <td>0.827006</td>\n",
              "      <td>1.365960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1417</th>\n",
              "      <td>1417</td>\n",
              "      <td>15626.134683</td>\n",
              "      <td>1.208096</td>\n",
              "      <td>0.914692</td>\n",
              "      <td>0.874394</td>\n",
              "      <td>1.083929</td>\n",
              "      <td>1.352754</td>\n",
              "      <td>0.606663</td>\n",
              "      <td>0.657862</td>\n",
              "      <td>1.055156</td>\n",
              "      <td>...</td>\n",
              "      <td>0.656540</td>\n",
              "      <td>0.970074</td>\n",
              "      <td>0.997054</td>\n",
              "      <td>1.222855</td>\n",
              "      <td>0.970080</td>\n",
              "      <td>1.306091</td>\n",
              "      <td>1.173684</td>\n",
              "      <td>0.832711</td>\n",
              "      <td>1.381874</td>\n",
              "      <td>1.149033</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1418</th>\n",
              "      <td>1418</td>\n",
              "      <td>15627.357673</td>\n",
              "      <td>1.167845</td>\n",
              "      <td>1.261191</td>\n",
              "      <td>1.306496</td>\n",
              "      <td>0.945764</td>\n",
              "      <td>1.119779</td>\n",
              "      <td>0.892840</td>\n",
              "      <td>1.305614</td>\n",
              "      <td>0.618601</td>\n",
              "      <td>...</td>\n",
              "      <td>0.827102</td>\n",
              "      <td>0.619797</td>\n",
              "      <td>1.307590</td>\n",
              "      <td>0.979190</td>\n",
              "      <td>0.767770</td>\n",
              "      <td>1.170864</td>\n",
              "      <td>0.892064</td>\n",
              "      <td>1.355639</td>\n",
              "      <td>0.753463</td>\n",
              "      <td>1.000630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1419</th>\n",
              "      <td>1419</td>\n",
              "      <td>15628.580662</td>\n",
              "      <td>0.624966</td>\n",
              "      <td>0.760200</td>\n",
              "      <td>1.208771</td>\n",
              "      <td>0.668682</td>\n",
              "      <td>0.903250</td>\n",
              "      <td>1.356746</td>\n",
              "      <td>1.157474</td>\n",
              "      <td>0.996727</td>\n",
              "      <td>...</td>\n",
              "      <td>0.731348</td>\n",
              "      <td>0.876257</td>\n",
              "      <td>1.391777</td>\n",
              "      <td>1.157928</td>\n",
              "      <td>0.913591</td>\n",
              "      <td>1.134840</td>\n",
              "      <td>0.971503</td>\n",
              "      <td>1.331920</td>\n",
              "      <td>0.866891</td>\n",
              "      <td>1.005167</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1420 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a610ef6f-6b96-4c0c-960d-cb565089b6d1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a610ef6f-6b96-4c0c-960d-cb565089b6d1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a610ef6f-6b96-4c0c-960d-cb565089b6d1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6770efd3-6489-4abc-b8ea-8e910dbb2cdb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6770efd3-6489-4abc-b8ea-8e910dbb2cdb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6770efd3-6489-4abc-b8ea-8e910dbb2cdb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ab7970a7-3479-4094-bd65-80ba3dd23613\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ab7970a7-3479-4094-bd65-80ba3dd23613 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# Lea y muestre el DataFrame aquí\n",
        "data_path2 = '/content/drive/MyDrive/Modulo Astro :)/data_spectra.csv'\n",
        "data = pd.read_csv(data_path2)\n",
        "data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hq24-d-hUEKK"
      },
      "source": [
        "### a) Gráfico de primer espectro:\n",
        "Grafique el espectro de la primera observación (columna **obs_1** vs columna **Wlth**) y responda: ¿Cuántas líneas de emisión detecta a simple vista?\n",
        "\n",
        "**Respuesta:** si tomamos como linea de emisión solo la grande, tendremos solo 1\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "ASKjJCIgVRm5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "32393187-2415-409a-8386-f8ea3b5202ff"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "# Grafique aquí\n",
        "\n",
        "#obtenemos los datos de Wlth y obs_1 del DataFrame para poder graficarlos\n",
        "wlth = data['Wlth']\n",
        "obs_1 = data['obs_1']\n",
        "\n",
        "\n",
        "plt.plot(wlth,obs_1,color = 'r', label = 'obs_1')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lw7a4L36VLSx"
      },
      "source": [
        "Notará que los valores del eje y están centrados alrededor de 1. Centre la observación en 0. Para esto, estime el valor medio del ruido y réstelo a todo el espectro ¿Cómo piensa que podria hacer esto?. Grafique el espectro resultante.\n",
        "\n",
        "**Respuesta:** Nombraremos una nueva variable, tal que esta sea el promedio obtenido en la obs_1. Con esto, crearemos otra variable que sea la resta entre obs_1 y su promedio obtenido en el paso anterior."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "0wp3qEGDV2Ro",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "55aa622b-8b5e-4a7b-d8dd-9c4c3596c022"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Grafique el espectro centrado en 0 aquí\n",
        "# sacamos promedio de obs_1\n",
        "valor_medio_ruido = obs_1.mean()\n",
        "#obtenemos la obs_final y la graficamos\n",
        "obs1_final = obs_1 - valor_medio_ruido\n",
        "plt.plot(wlth,obs1_final,color = 'r', label = 'obs_1 centrada en 0')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-wctIMluXMSn"
      },
      "source": [
        "### b) Nivel de ruido:\n",
        "\n",
        "En esta parte estimaremos el nivel de ruido de la la observación 1 de una forma distinta. Para esto siga los sigueintes pasos:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Grj907EXPpB"
      },
      "source": [
        "1. Tome la columna **obs_1** y guarde en la variable **ruido** un subconjunto de datos centrados en la media de **obs_1** con un margen de $\\pm 3 \\sigma$, con $\\sigma$ la desviación estándar de **obs_1**.\n",
        "\n",
        "Note que este subconjunto corresponde a ruido principalmente."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "njBzind3Xemx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "e872e40f-1ba3-4530-b546-262299794a08"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       0.673065\n",
              "1       1.218438\n",
              "2       1.244496\n",
              "3       1.395414\n",
              "4       1.013531\n",
              "          ...   \n",
              "1415    0.693123\n",
              "1416    1.387281\n",
              "1417    1.208096\n",
              "1418    1.167845\n",
              "1419    0.624966\n",
              "Name: obs_1, Length: 1418, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>obs_1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.673065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.218438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.244496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.395414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.013531</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1415</th>\n",
              "      <td>0.693123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1416</th>\n",
              "      <td>1.387281</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1417</th>\n",
              "      <td>1.208096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1418</th>\n",
              "      <td>1.167845</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1419</th>\n",
              "      <td>0.624966</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1418 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "std_obs1 = obs_1.std()\n",
        "limite_sup = valor_medio_ruido + 3*std_obs1\n",
        "limite_inf = valor_medio_ruido - 3*std_obs1\n",
        "ruido = obs_1[(obs_1 > limite_inf) & (obs_1 < limite_sup)]\n",
        "ruido\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hf5enNp6XfiJ"
      },
      "source": [
        "2. Reste la media del ruido al espectro para centrar y grafique el espectro resultante."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "xnjenF_OXkCR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "e6857498-322e-4b34-e4ef-d42bcdb8ecf1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Grafique el espectro centrado en 0 aquí\n",
        "ruido_mean = ruido.mean()\n",
        "obs1_final = obs_1 - ruido.mean()\n",
        "plt.plot(wlth,obs1_final,color = 'r', label = 'obs_1 centrado en 0')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mv4guDgcXkXy"
      },
      "source": [
        "3. Calcule $\\sigma$ del ruido y grafique un margen de $\\pm n*\\sigma$ (con $n$ entero) sobre el espectro como dos líneas horizontales. ¿Qué valor de $n$ le parece adecuado y por qué? este será el nivel de ruido.\n",
        "\n",
        "**Respuesta:**El valor de n adecuado seria 1.6, ya que con este valor logramos encerrar todas las observaciones entre las líneas de manera precisa. Pero como n solo entero, sera n = 2, ya que con este valor no se nos escapa ningún valor de obs_1 pequeño\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "std_ruido = ruido.std()\n",
        "f = wlth*0 + std_ruido*2\n",
        "plt.plot(wlth,f,color = 'g')\n",
        "plt.plot(wlth,-f,color = 'g')\n",
        "plt.plot(wlth,obs1_final,color = 'r', label = 'con lineas')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "OZtXMOavF7AL",
        "outputId": "1a1868f5-3faa-45b3-8fe5-8fbd5ec763a8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d7y0fEa5bIa6"
      },
      "source": [
        "### c) Disminución de $\\sigma$\n",
        "\n",
        "Ahora verá cómo el nivel de ruido disminuye al promediar observaciones. Siga los siguientes pasos:\n",
        "\n",
        "1. Centre todas las observaciones en 0 de la misma manera hecha en ela parte b). Como consejo, puede recorrer las columnas del DataFrame con un for y modificar solo las que correspondan a una observación."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "uyvsnX2-beug"
      },
      "outputs": [],
      "source": [
        "# Con la siguiente función podremos centrar todas las observaciones. Esto se hace atravez de un ciclo for, donde de analiza cada columna:\n",
        "def centrar(data):\n",
        "  Valor_medio_ruido = data.mean()\n",
        "  std = data.std()\n",
        "  limite_sup = Valor_medio_ruido + 3*std\n",
        "  limite_inf = Valor_medio_ruido - 3*std\n",
        "  ruido = data[(data > limite_inf) & (data < limite_sup)]\n",
        "  ruido_mean = ruido.mean()\n",
        "  data_final = data - ruido.mean()\n",
        "  return data_final\n",
        "\n",
        "for i in range(len(data.columns)-2):\n",
        "  if data.columns[i] == 'wlth':\n",
        "    continue\n",
        "  data[f'obs_{i+1}'] = centrar(data[f'obs_{i+1}'])\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0C5ZCBMvbfWo"
      },
      "source": [
        "2. A continuación verá cómo cambia sigma a medida que promediamos los espectros. Para esto realice el siguiente algoritmo:\n",
        "\n",
        " - Calcule $\\sigma$ de **obs_1**.\n",
        " - Promedie **obs_1** y **obs_2**, y calcule $\\sigma$.\n",
        " - Promedie **obs_1**, **obs_2** y **obs_3**, y calcule $\\sigma$.\n",
        " - Siga hasta haber promediado todas las observaciones (recuerde guardar los valores de $\\sigma$)\n",
        "\n",
        " Añada al DataFrame una nueva columna **obs_all** que corresponda al promedio de todos los espectros."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dio mio que me costo esta\n",
        "#con if i ==1, saca la varianza de data[obs_1], ya que al ser el primer dato, no hay que promediar nada.\n",
        "#En el else, tenemos la recursión ya que se iran promediando a medida que el i vaya aumentando\n",
        "\n",
        "sigma = pd.DataFrame(columns = ['sigma'])\n",
        "for i in range(1,21):\n",
        "\n",
        "  if i == 1:\n",
        "    std = np.std(data['obs_1'])\n",
        "    sigma.loc[0,'sigma'] = std\n",
        "    u = data['obs_1']\n",
        "  else:\n",
        "\n",
        "    u += data[f'obs_{i}']\n",
        "    prom_obs =u/(i)\n",
        "    data[f'obs_1,obs_{i}'] = prom_obs\n",
        "    std = np.std(prom_obs)\n",
        "    sigma.loc[i,'sigma'] = std\n",
        "\n",
        "\n",
        "prom_obs.name = 'obs_all'\n",
        "data_final = pd.concat([data, prom_obs], axis=1)\n",
        "data_final\n"
      ],
      "metadata": {
        "id": "-nQzAbYwQr1S",
        "outputId": "40d44f08-fe8b-4b6c-f020-44d55b443f86",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0          Wlth     obs_1     obs_2     obs_3     obs_4  \\\n",
              "0              0  13893.158801 -1.516814  0.048739  0.133701  0.362853   \n",
              "1              1  13894.381791  0.516329  0.384755 -0.354463  0.283881   \n",
              "2              2  13895.604780  0.320068 -0.224127  0.210778 -0.104288   \n",
              "3              3  13896.827769  0.536569 -0.147004 -0.072299 -0.385685   \n",
              "4              4  13898.050759 -0.766351 -0.108552  0.123400  0.351261   \n",
              "...          ...           ...       ...       ...       ...       ...   \n",
              "1415        1415  15623.688705 -0.263638  0.222278  0.247164  0.103127   \n",
              "1416        1416  15624.911694  2.499336  0.332789  0.148880  0.251925   \n",
              "1417        1417  15626.134683  0.419321 -0.085328 -0.127833  0.081110   \n",
              "1418        1418  15627.357673  0.655232  0.261171  0.304269 -0.057055   \n",
              "1419        1419  15628.580662  0.252077 -0.239820  0.206545 -0.334137   \n",
              "\n",
              "         obs_5     obs_6     obs_7     obs_8  ...  obs_1,obs_12  obs_1,obs_13  \\\n",
              "0     0.201410 -0.223720 -0.217798 -0.285839  ...     -0.053774     -0.052797   \n",
              "1     0.219970  0.294341  0.294168 -0.030236  ...      0.012495      0.019946   \n",
              "2     0.199370  0.129416  0.138232 -0.364276  ...      0.025981      0.013643   \n",
              "3     0.097323  0.362443 -0.184435 -0.107535  ...      0.054930      0.065391   \n",
              "4    -0.322103 -0.032836 -0.364873  0.290442  ...     -0.040700     -0.061376   \n",
              "...        ...       ...       ...       ...  ...           ...           ...   \n",
              "1415  0.370664 -0.221073  0.099183  0.052125  ...      0.062700      0.088028   \n",
              "1416  0.327237 -0.021668 -0.113744  0.200203  ...      0.139306      0.135683   \n",
              "1417  0.348949 -0.394537 -0.337372  0.045863  ...     -0.051296     -0.048024   \n",
              "1418  0.115973 -0.108359  0.310380 -0.390692  ...      0.035545      0.056023   \n",
              "1419 -0.100556  0.355547  0.162240 -0.012565  ...     -0.043586     -0.010544   \n",
              "\n",
              "      obs_1,obs_14  obs_1,obs_15  obs_1,obs_16  obs_1,obs_17  obs_1,obs_18  \\\n",
              "0        -0.056036     -0.070148     -0.072664     -0.081895     -0.065505   \n",
              "1         0.035412      0.016610      0.011515      0.012359      0.018378   \n",
              "2         0.029640      0.022750      0.018256      0.033758      0.010541   \n",
              "3         0.064656      0.042132      0.053960      0.072809      0.056360   \n",
              "4        -0.054894     -0.040653     -0.032952     -0.007868     -0.019042   \n",
              "...            ...           ...           ...           ...           ...   \n",
              "1415      0.055685      0.031710      0.018281      0.006584      0.010588   \n",
              "1416      0.114372      0.127539      0.130136      0.139027      0.128386   \n",
              "1417     -0.028128     -0.028396     -0.007411      0.003573     -0.005944   \n",
              "1418      0.051083      0.032047      0.040802      0.032384      0.050318   \n",
              "1419      0.002037     -0.004007      0.004750      0.003125      0.021367   \n",
              "\n",
              "      obs_1,obs_19  obs_1,obs_20   obs_all  \n",
              "0        -0.064835     -0.075841 -0.075841  \n",
              "1         0.037923      0.025816  0.025816  \n",
              "2         0.016585      0.016003  0.016003  \n",
              "3         0.043157      0.026828  0.026828  \n",
              "4        -0.024828     -0.038318 -0.038318  \n",
              "...            ...           ...       ...  \n",
              "1415     -0.008509     -0.013182 -0.013182  \n",
              "1416      0.112258      0.124967  0.124967  \n",
              "1417      0.014201      0.020966  0.020966  \n",
              "1418      0.034428      0.032762  0.032762  \n",
              "1419      0.012970      0.012604  0.012604  \n",
              "\n",
              "[1420 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-992f9984-1404-4572-938b-2e04cb68b0ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Wlth</th>\n",
              "      <th>obs_1</th>\n",
              "      <th>obs_2</th>\n",
              "      <th>obs_3</th>\n",
              "      <th>obs_4</th>\n",
              "      <th>obs_5</th>\n",
              "      <th>obs_6</th>\n",
              "      <th>obs_7</th>\n",
              "      <th>obs_8</th>\n",
              "      <th>...</th>\n",
              "      <th>obs_1,obs_12</th>\n",
              "      <th>obs_1,obs_13</th>\n",
              "      <th>obs_1,obs_14</th>\n",
              "      <th>obs_1,obs_15</th>\n",
              "      <th>obs_1,obs_16</th>\n",
              "      <th>obs_1,obs_17</th>\n",
              "      <th>obs_1,obs_18</th>\n",
              "      <th>obs_1,obs_19</th>\n",
              "      <th>obs_1,obs_20</th>\n",
              "      <th>obs_all</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>13893.158801</td>\n",
              "      <td>-1.516814</td>\n",
              "      <td>0.048739</td>\n",
              "      <td>0.133701</td>\n",
              "      <td>0.362853</td>\n",
              "      <td>0.201410</td>\n",
              "      <td>-0.223720</td>\n",
              "      <td>-0.217798</td>\n",
              "      <td>-0.285839</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.053774</td>\n",
              "      <td>-0.052797</td>\n",
              "      <td>-0.056036</td>\n",
              "      <td>-0.070148</td>\n",
              "      <td>-0.072664</td>\n",
              "      <td>-0.081895</td>\n",
              "      <td>-0.065505</td>\n",
              "      <td>-0.064835</td>\n",
              "      <td>-0.075841</td>\n",
              "      <td>-0.075841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>13894.381791</td>\n",
              "      <td>0.516329</td>\n",
              "      <td>0.384755</td>\n",
              "      <td>-0.354463</td>\n",
              "      <td>0.283881</td>\n",
              "      <td>0.219970</td>\n",
              "      <td>0.294341</td>\n",
              "      <td>0.294168</td>\n",
              "      <td>-0.030236</td>\n",
              "      <td>...</td>\n",
              "      <td>0.012495</td>\n",
              "      <td>0.019946</td>\n",
              "      <td>0.035412</td>\n",
              "      <td>0.016610</td>\n",
              "      <td>0.011515</td>\n",
              "      <td>0.012359</td>\n",
              "      <td>0.018378</td>\n",
              "      <td>0.037923</td>\n",
              "      <td>0.025816</td>\n",
              "      <td>0.025816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>13895.604780</td>\n",
              "      <td>0.320068</td>\n",
              "      <td>-0.224127</td>\n",
              "      <td>0.210778</td>\n",
              "      <td>-0.104288</td>\n",
              "      <td>0.199370</td>\n",
              "      <td>0.129416</td>\n",
              "      <td>0.138232</td>\n",
              "      <td>-0.364276</td>\n",
              "      <td>...</td>\n",
              "      <td>0.025981</td>\n",
              "      <td>0.013643</td>\n",
              "      <td>0.029640</td>\n",
              "      <td>0.022750</td>\n",
              "      <td>0.018256</td>\n",
              "      <td>0.033758</td>\n",
              "      <td>0.010541</td>\n",
              "      <td>0.016585</td>\n",
              "      <td>0.016003</td>\n",
              "      <td>0.016003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>13896.827769</td>\n",
              "      <td>0.536569</td>\n",
              "      <td>-0.147004</td>\n",
              "      <td>-0.072299</td>\n",
              "      <td>-0.385685</td>\n",
              "      <td>0.097323</td>\n",
              "      <td>0.362443</td>\n",
              "      <td>-0.184435</td>\n",
              "      <td>-0.107535</td>\n",
              "      <td>...</td>\n",
              "      <td>0.054930</td>\n",
              "      <td>0.065391</td>\n",
              "      <td>0.064656</td>\n",
              "      <td>0.042132</td>\n",
              "      <td>0.053960</td>\n",
              "      <td>0.072809</td>\n",
              "      <td>0.056360</td>\n",
              "      <td>0.043157</td>\n",
              "      <td>0.026828</td>\n",
              "      <td>0.026828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>13898.050759</td>\n",
              "      <td>-0.766351</td>\n",
              "      <td>-0.108552</td>\n",
              "      <td>0.123400</td>\n",
              "      <td>0.351261</td>\n",
              "      <td>-0.322103</td>\n",
              "      <td>-0.032836</td>\n",
              "      <td>-0.364873</td>\n",
              "      <td>0.290442</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.040700</td>\n",
              "      <td>-0.061376</td>\n",
              "      <td>-0.054894</td>\n",
              "      <td>-0.040653</td>\n",
              "      <td>-0.032952</td>\n",
              "      <td>-0.007868</td>\n",
              "      <td>-0.019042</td>\n",
              "      <td>-0.024828</td>\n",
              "      <td>-0.038318</td>\n",
              "      <td>-0.038318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1415</th>\n",
              "      <td>1415</td>\n",
              "      <td>15623.688705</td>\n",
              "      <td>-0.263638</td>\n",
              "      <td>0.222278</td>\n",
              "      <td>0.247164</td>\n",
              "      <td>0.103127</td>\n",
              "      <td>0.370664</td>\n",
              "      <td>-0.221073</td>\n",
              "      <td>0.099183</td>\n",
              "      <td>0.052125</td>\n",
              "      <td>...</td>\n",
              "      <td>0.062700</td>\n",
              "      <td>0.088028</td>\n",
              "      <td>0.055685</td>\n",
              "      <td>0.031710</td>\n",
              "      <td>0.018281</td>\n",
              "      <td>0.006584</td>\n",
              "      <td>0.010588</td>\n",
              "      <td>-0.008509</td>\n",
              "      <td>-0.013182</td>\n",
              "      <td>-0.013182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1416</th>\n",
              "      <td>1416</td>\n",
              "      <td>15624.911694</td>\n",
              "      <td>2.499336</td>\n",
              "      <td>0.332789</td>\n",
              "      <td>0.148880</td>\n",
              "      <td>0.251925</td>\n",
              "      <td>0.327237</td>\n",
              "      <td>-0.021668</td>\n",
              "      <td>-0.113744</td>\n",
              "      <td>0.200203</td>\n",
              "      <td>...</td>\n",
              "      <td>0.139306</td>\n",
              "      <td>0.135683</td>\n",
              "      <td>0.114372</td>\n",
              "      <td>0.127539</td>\n",
              "      <td>0.130136</td>\n",
              "      <td>0.139027</td>\n",
              "      <td>0.128386</td>\n",
              "      <td>0.112258</td>\n",
              "      <td>0.124967</td>\n",
              "      <td>0.124967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1417</th>\n",
              "      <td>1417</td>\n",
              "      <td>15626.134683</td>\n",
              "      <td>0.419321</td>\n",
              "      <td>-0.085328</td>\n",
              "      <td>-0.127833</td>\n",
              "      <td>0.081110</td>\n",
              "      <td>0.348949</td>\n",
              "      <td>-0.394537</td>\n",
              "      <td>-0.337372</td>\n",
              "      <td>0.045863</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.051296</td>\n",
              "      <td>-0.048024</td>\n",
              "      <td>-0.028128</td>\n",
              "      <td>-0.028396</td>\n",
              "      <td>-0.007411</td>\n",
              "      <td>0.003573</td>\n",
              "      <td>-0.005944</td>\n",
              "      <td>0.014201</td>\n",
              "      <td>0.020966</td>\n",
              "      <td>0.020966</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1418</th>\n",
              "      <td>1418</td>\n",
              "      <td>15627.357673</td>\n",
              "      <td>0.655232</td>\n",
              "      <td>0.261171</td>\n",
              "      <td>0.304269</td>\n",
              "      <td>-0.057055</td>\n",
              "      <td>0.115973</td>\n",
              "      <td>-0.108359</td>\n",
              "      <td>0.310380</td>\n",
              "      <td>-0.390692</td>\n",
              "      <td>...</td>\n",
              "      <td>0.035545</td>\n",
              "      <td>0.056023</td>\n",
              "      <td>0.051083</td>\n",
              "      <td>0.032047</td>\n",
              "      <td>0.040802</td>\n",
              "      <td>0.032384</td>\n",
              "      <td>0.050318</td>\n",
              "      <td>0.034428</td>\n",
              "      <td>0.032762</td>\n",
              "      <td>0.032762</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1419</th>\n",
              "      <td>1419</td>\n",
              "      <td>15628.580662</td>\n",
              "      <td>0.252077</td>\n",
              "      <td>-0.239820</td>\n",
              "      <td>0.206545</td>\n",
              "      <td>-0.334137</td>\n",
              "      <td>-0.100556</td>\n",
              "      <td>0.355547</td>\n",
              "      <td>0.162240</td>\n",
              "      <td>-0.012565</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.043586</td>\n",
              "      <td>-0.010544</td>\n",
              "      <td>0.002037</td>\n",
              "      <td>-0.004007</td>\n",
              "      <td>0.004750</td>\n",
              "      <td>0.003125</td>\n",
              "      <td>0.021367</td>\n",
              "      <td>0.012970</td>\n",
              "      <td>0.012604</td>\n",
              "      <td>0.012604</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1420 rows × 42 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-992f9984-1404-4572-938b-2e04cb68b0ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-992f9984-1404-4572-938b-2e04cb68b0ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-992f9984-1404-4572-938b-2e04cb68b0ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9644da41-446e-48a0-8394-c633e8d2fb63\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9644da41-446e-48a0-8394-c633e8d2fb63')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9644da41-446e-48a0-8394-c633e8d2fb63 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1274d4e6-adfb-4069-9b0e-9b924c8df5a9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data_final')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1274d4e6-adfb-4069-9b0e-9b924c8df5a9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data_final');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_final"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VnU_U3BobvJs"
      },
      "source": [
        " 3. Finalmente grafique los valores de $\\sigma$ en funcion de $N$, con $N$ el numero de observaciones promediada. ¿Qué ocurre con $\\sigma$? ¿Es esperado el resultado? Comente.\n",
        "\n",
        "**Respuesta:** A medida que vamos sumando más observaciones, sigma va disminuyendo. Esto se debe a que a medida que vamos sumando las observaciones y sacando su promedio, cada vez se va pareciendo más al valor de la obs. Por lo que al sacar sigma, este se aproxima a 0."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "Kndqs-L_bxuY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "ef562426-243e-43d5-8d80-bf0e01ee428a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "x = np.linspace(1,20,20)\n",
        "plt.plot(x,sigma,color = 'r', label = 'sigma')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "buhUwcZaGujJ"
      },
      "source": [
        "### d) Promedio de observaciones\n",
        "\n",
        "Finalmente grafique el promedio de todas las observaciones (columna **obs_all** vs columna **Wlth**). ¿Cuántas líneas de emisión puede apreciar ahora? ¿Podría explicar a qué se debe? Comente.\n",
        "\n",
        "**Respuesta:** Ahora se pueden apreciar varias lineas de emisión (5 en total), ya que estamos juntando todas las observaciones hechas a distintas longitudes de onda, por lo que la obtener un promedio, obtenemos más o menos el grafico final de líneas de emisión."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "yKyC9j53dT5U",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "outputId": "15fac475-d6b2-4343-c847-f7db59d5dae2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(wlth,data_final['obs_all'],color = 'r', label = 'obs_all')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}